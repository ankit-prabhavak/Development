. JavaScript Script
JavaScript is a scripting language that runs in the browser to make web pages interactive.
It can be embedded directly in HTML using the <script> tag.
html
Copy
<script>
    console.log("Hello, World!");
</script>
2. Function
A function is a block of code designed to perform a particular task.
Functions can be declared with the function keyword:
javascript
Copy
function greet(name) {
    return "Hello, " + name;
}
3. Output
The result produced by running JavaScript code, often displayed in the console using console.log() or output to the webpage (via document.write() or DOM manipulation).
4. Statement
A statement is a single line of code that performs an action, like a declaration or an expression.
javascript
Copy
let x = 10;  // This is a statement
5. Variables
Variables are containers for storing data.
They are declared using let, const, or var:
javascript
Copy
let age = 25;  // 'let' allows re-assignment
const name = "John";  // 'const' does not allow re-assignment
6. Operators
Operators perform operations on variables and values.
Arithmetic operators: +, -, *, /, %.
Comparison operators: ==, !=, >, <, >=, <=.
Logical operators: &&, ||, !.
Assignment operators: =, +=, -=, *=, /=.
7. Datatypes
JavaScript has primitive types (number, string, boolean, null, undefined, symbol, bigint) and reference types (objects, arrays, functions).
javascript
Copy
let number = 10;   // number
let text = "Hello"; // string
let isActive = true; // boolean
let user = { name: "Alice", age: 30 }; // object
8. Objects
Objects are collections of key-value pairs.
javascript
Copy
let person = {
    name: "John",
    age: 30,
    greet: function() { console.log("Hello!"); }
};
9. Events
Events are actions that occur in the browser (like clicks, key presses, etc.) that can trigger JavaScript functions.
javascript
Copy
document.getElementById("button").addEventListener("click", function() {
    alert("Button clicked!");
});
10. String Methods
JavaScript provides many methods to manipulate strings.
length: Returns the string's length.
toUpperCase(): Converts to uppercase.
toLowerCase(): Converts to lowercase.
substring(start, end): Extracts a part of the string.
trim(): Removes whitespaces.
javascript
Copy
let text = " Hello ";
console.log(text.trim());  // "Hello"
11. Arrays
Arrays store multiple values in a single variable.
javascript
Copy
let fruits = ["apple", "banana", "cherry"];
console.log(fruits[0]);  // "apple"
12. If Else
If-else statements execute code based on a condition.
javascript
Copy
if (age > 18) {
    console.log("Adult");
} else {
    console.log("Minor");
}
13. Switch
A switch statement allows multiple conditions to be checked.
javascript
Copy
let day = 3;
switch (day) {
    case 1:
        console.log("Monday");
        break;
    case 2:
        console.log("Tuesday");
        break;
    default:
        console.log("Invalid day");
}
14. Loop For
The for loop repeats a block of code a set number of times.
javascript
Copy
for (let i = 0; i < 5; i++) {
    console.log(i);  // Outputs 0 to 4
}
15. Loop In
For-in loops iterate over the properties of an object.
javascript
Copy
let person = { name: "Alice", age: 30 };
for (let key in person) {
    console.log(key + ": " + person[key]);
}
16. Loop For-of
For-of loops iterate over the elements of an array or iterable object.
javascript
Copy
let fruits = ["apple", "banana", "cherry"];
for (let fruit of fruits) {
    console.log(fruit);
}
17. Debugging
Debugging involves finding and fixing errors in code using tools like console.log(), the browser's developer tools, or using a debugger.
Example:
javascript
Copy
console.log("Variable value:", variable);
18. Validation of Forms
Form validation checks user input for correctness before submission.
javascript
Copy
function validateForm() {
    let email = document.getElementById("email").value;
    if (!email) {
        alert("Email is required!");
        return false;
    }
    return true;
}
19. Functions and Invocation Patterns
Functions can be invoked (called) in different ways:
Regular invocation:
javascript
Copy
greet("John");
Method invocation (when a function is a property of an object):
javascript
Copy
person.greet();
Constructor invocation (using new to create instances of objects):
javascript
Copy
let newPerson = new Person("Alice");
20. Discussion of ECMAScript
ECMAScript is the standard specification for JavaScript.
Different versions (e.g., ES5, ES6, ES7) introduce new features and improvements.
ES6/ES2015 introduced:
Arrow functions (() => {})
let, const
Template literals (`Hello ${name}`)
Classes and modules.
21. JS Expressions, Operators, Statements, and Declarations
Expressions produce a value, like 5 + 3.
Operators perform actions (e.g., +, -).
Statements perform an action (e.g., assignment let x = 10).
Declarations introduce variables or functions (let x;).
22. Object-Oriented Programming (OOP) in JS
OOP is a programming paradigm based on objects and classes.
Objects contain properties and methods.
JavaScript uses prototypes for inheritance:
javascript
Copy
function Person(name) {
    this.name = name;
}
Person.prototype.greet = function() {
    console.log("Hello " + this.name);
};
23. This in JavaScript
The keyword this refers to the current context or object the code is being executed in.
In a method: refers to the object the method is called on.
In a function: refers to the global object (window in browsers), unless in strict mode.
24. Scope and Closures
Scope determines the accessibility of variables.
Global scope: accessible everywhere.
Local scope: accessible only within a function.
Closure allows a function to remember the scope in which it was created:
javascript
Copy
function outer() {
    let counter = 0;
    return function inner() {
        counter++;
        console.log(counter);
    };
}
const counterFunc = outer();
counterFunc();  // 1
counterFunc();  // 2
25. Refactoring and Debugging
Refactoring involves improving code without changing its functionality.
Debugging involves identifying and resolving errors in code. Modern IDEs and browser developer to provide useful debugging features.
These are the key concepts and patterns in JavaScript at an intermediate level. By understanding these principles, you can write more efficient, organized, and maintainable JavaScript code.


